def good = "#3dd62f"
def danger = "#f45641"
def warning = "#ffd344"

config = null
jenkinsUtils = null

/**
 * Checks if the current commit is from jenkins
 * @return true when the current commit is from jenkins
 */
boolean isJenkinsCommit() {
    def commitEmail = sh(script: "git log -1 --pretty=format:'%ae'", returnStdout: true)?.trim()
    return (commitEmail == "${env.GIT_COMMITTER_EMAIL}")
}

/**
 * Check if the current branch is master
 * @return true when the current branch is master
 */
boolean isMaster() {
    def branchFullName = "${env.GIT_BRANCH}"
    def branchList = branchFullName.tokenize('/')
    def branchName = branchList.get(branchList.size() - 1)
    return branchName == 'master'
}

/**
 * Authenticate session for pushing into ECR
 */
void authECR() {
    println "Authenticate to push docker image"
    ansiColor('xterm') {
        sh '''
      #!/bin/bash
      # configure system-wide environment variables and aliases needed for nvm and npm
      source /etc/profile
      export AWS_DEFAULT_REGION=us-east-1
      # Use the cross account role to access ECR
      eval $(assume-role --role-arn="$ECR_ROLE")
      # Login to private container repository
      eval $(aws ecr get-login --no-include-email)
    '''
    }
}

/**
 * Give access to Jenkins deployer for resources (dynamo table) for running integration tests
 */
void deployJenkinsAccessToResourceStack() {
    def env = 'sole'
    echo "Deploying Resource Stack ${env}"
    def stackName = "${jenkinsUtils.getCFNStackName(env)}-resources-access"
    def parameterOverrides = jenkinsUtils.paramsFromFile("cfn/${env}.offer.params.json")
    def args = "deploy --stack-name ${stackName} --region us-east-1 --template-file cfn/templates/jenkinsUserAccessToSoleResources.yaml --parameter-overrides ${parameterOverrides} --capabilities CAPABILITY_IAM"
    sh "./jenkins/aws-cloudformation ${args}"
}

services {
    agent {
        node {
            label 'ubuntu'
        }
    }
    stages {


        stage("Repository Information") {
            steps {
                println "Repository Information"
                script {
                    config = readProperties(file: 'jenkins/config.env')
                    jenkinsUtils = load "jenkins/JenkinsUtils.groovy"
                    env.SKIP_SNAPSHOT_RELEASE = (!isJenkinsCommit() && isMaster() && true)
                }
            }
        }

        stage("Execute Parallel Deployment with OSAWP Check") {
            parallel {
                stage("Execute Deployment") {
                    stages {

                        stage("Build") {
                            steps {
                                println "Build"
                                sh(script: './gradlew build')
                                withCredentials([[
                                                         $class       : "AmazonWebServicesCredentialsBinding",
                                                         credentialsId: "dev-aws-deployer"
                                                 ]]) {
                                    sh(script: './jenkins/validate-cfn')
                                }
                                script {
                                    config.versionSnapshot = sh(script: './gradlew properties -q | grep ^version: | awk \'{print $2}\'', returnStdout: true)?.trim()
                                    def (versionNumber, snapshot) = config.versionSnapshot.tokenize('-')
                                    config.version = versionNumber
                                }
                            }
                            post {
                                always {
                                    junit '**/build/test-results/**/*.xml'
                                    publishHTML(target: [
                                            allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true,
                                            reportDir   : 'build/reports/tests/test/',
                                            reportFiles : 'index.html',
                                            reportTitles: 'Unit Tests',
                                            reportName  : 'Unit Tests'])

                                    sh './gradlew jacocoTestReport'
                                    publishHTML(target: [
                                            allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true,
                                            reportDir   : 'nova-regional-offers-consumer/build/reports/jacoco/',
                                            reportFiles : 'index.html',
                                            reportTitles: 'Consumer Module Code Coverage',
                                            reportName  : 'Consumer Module Code Coverage'])
                                    publishHTML(target: [
                                            allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true,
                                            reportDir   : 'nova-regional-offers-service/build/reports/jacoco/',
                                            reportFiles : 'index.html',
                                            reportTitles: 'Service Module Code Coverage',
                                            reportName  : 'Service Module Code Coverage'])
                                    publishHTML(target: [
                                            allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true,
                                            reportDir   : 'nova-regional-offers-shared/build/reports/jacoco/',
                                            reportFiles : 'index.html',
                                            reportTitles: 'Shared Module Code Coverage',
                                            reportName  : 'Shared Module Code Coverage'])
                                }
                            }
                        }
                        stage("Detekt") {
                            steps {
                                println "Detekt"
                                sh(script: './gradlew detekt')
                            }
                            post {
                                always {
                                    publishHTML(target: [
                                            allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true,
                                            reportDir   : 'nova-regional-offers-consumer/build/reports/detekt/',
                                            reportFiles : 'detekt.html',
                                            reportTitles: 'Consumer Module Detekt',
                                            reportName  : 'Consumer Module Detekt'])
                                    publishHTML(target: [
                                            allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true,
                                            reportDir   : 'nova-regional-offers-service/build/reports/detekt/',
                                            reportFiles : 'detekt.html',
                                            reportTitles: 'Service Module Detekt',
                                            reportName  : 'Service Module Detekt'])
                                    publishHTML(target: [
                                            allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true,
                                            reportDir   : 'nova-regional-offers-shared/build/reports/detekt/',
                                            reportFiles : 'detekt.html',
                                            reportTitles: 'Shared Module Detekt',
                                            reportName  : 'Shared Module Detekt'])
                                }
                            }
                        }

                        stage("Snapshot Release") {
                            when { environment name: 'SKIP_SNAPSHOT_RELEASE', value: 'true' }
                            steps {
                                println "Snapshot Release"
                                authECR()
                                sh(script: './gradlew dockerPush')
                            }
                        }

                        stage("Sole Deploy") {
                             when { environment name: 'SKIP_SNAPSHOT_RELEASE', value: 'true' }
                            steps {
                                println "Sole Deploy"
                                withCredentials([[
                                                         $class       : "AmazonWebServicesCredentialsBinding",
                                                         credentialsId: "dev-aws-deployer"
                                                 ]]) {
                                    deployJenkinsAccessToResourceStack()
                                    script {
                                        jenkinsUtils.deployResourceStack('sole')
                                        jenkinsUtils.ecsDeploy('sole', config.versionSnapshot)
                                        jenkinsUtils.deployConsumerStack('sole', config.versionSnapshot)
                                        jenkinsUtils.deployCronStack('sole', config.versionSnapshot)
                                    }
                                }
                            }
                            post {
                                failure {
                                    echo "Failed Sole Deploy"
                                    withCredentials([[
                                                             $class       : "AmazonWebServicesCredentialsBinding",
                                                             credentialsId: "dev-aws-deployer"
                                                     ]]) {
                                        script {
                                            jenkinsUtils.sendSlackMessage("Sole Deploy Failed", "<${env.BUILD_URL}|Click here to review the build>", danger)
                                            jenkinsUtils.deleteStack()
                                        }
                                    }
                                }
                            }
                        }

                        stage("Sole Test") {
                            when { environment name: 'SKIP_SNAPSHOT_RELEASE', value: 'true' }
                            steps {
                                println "Sole Test"
                                withCredentials([[
                                                         $class       : "AmazonWebServicesCredentialsBinding",
                                                         credentialsId: "dev-aws-deployer"
                                                 ]]) {
                                     sh(script: './gradlew integrationTest -PcucumberTag=@sole')
                                }
                            }
                            post {
                                always {
                                    cucumber buildStatus: null,
                                            fileIncludePattern: '**/build/reports/cucumber/cucumber-json-report.json',
                                            trendsLimit: 10
                                }

                                failure {
                                    echo "Failed Sole Test"
                                    withCredentials([[
                                                             $class       : "AmazonWebServicesCredentialsBinding",
                                                             credentialsId: "dev-aws-deployer"
                                                     ]]) {
                                        script {
                                            jenkinsUtils.sendSlackMessage("Sole Test Failed", "<${env.BUILD_URL}|Click here to review the build>", danger)
                                            jenkinsUtils.deleteStack()
                                        }
                                    }
                                }

                            }
                        }

                        stage("Clean up Infra") {
                            when { environment name: 'SKIP_SNAPSHOT_RELEASE', value: 'true' }
                            steps {
                                println "Clean up Infra"
                                withCredentials([[
                                                         $class       : "AmazonWebServicesCredentialsBinding",
                                                         credentialsId: "dev-aws-deployer"
                                                 ]]) {
                                    script {
                                        jenkinsUtils.deleteStack()
                                    }
                                }
                            }
                        }


                    }
                }
                stage("OWASP Check") {
                    stages {
                        stage("OWASP  Dependency Check") {
                            when { environment name: 'SKIP_SNAPSHOT_RELEASE', value: 'true' }
                            steps {
                                println "OWASP  Dependency Check"
                                // sh(script: './gradlew dependencyCheckAggregate')
                            }
                            post {
                                always {
                                    publishHTML(target: [
                                            allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true,
                                            reportDir   : 'build/reports',
                                            reportFiles : 'dependency-check-report.html',
                                            reportTitles: 'OWASP dependency check report',
                                            reportName  : 'OWASP dependency check report'])
                                }
                            }
                        }
                        stage("Checkmarx Scan") {
                            when { environment name: 'SKIP_SNAPSHOT_RELEASE', value: 'true' }
                            steps {
                                println "Checkmarx Scan"
                                step([$class                  : 'CxScanBuilder', comment: '', credentialsId: '', excludeFolders: '', excludeOpenSourceFolders: '',
                                      exclusionsSetting       : 'job', failBuildOnNewResults: "${!isMaster()}",
                                      filterPattern           : '''!**/_cvs/**/*, !**/.svn/**/*,   !**/.hg/**/*,   !**/.git/**/*,  !**/.bzr/**/*, !**/bin/**/*,
                                    !**/build/**/*, !**/.gradle/**/*, !**/obj/**/*,  !**/backup/**/*, !**/.idea/**/*, !**/*.DS_Store, !**/*.ipr, !**/*.iws,
                                    !**/*.bak,     !**/*.tmp,       !**/*.aac,      !**/*.aif,      !**/*.iff,     !**/*.m3u, !**/*.mid, !**/*.mp3,
                                    !**/*.mpa,     !**/*.ra,        !**/*.wav,      !**/*.wma,      !**/*.3g2,     !**/*.3gp, !**/*.asf, !**/*.asx,
                                    !**/*.avi,     !**/*.flv,       !**/*.mov,      !**/*.mp4,      !**/*.mpg,     !**/*.rm,  !**/*.swf, !**/*.vob,
                                    !**/*.wmv,     !**/*.bmp,       !**/*.gif,      !**/*.jpg,      !**/*.png,     !**/*.psd, !**/*.tif, !**/*.swf,
                                    !**/*.jar,     !**/*.zip,       !**/*.rar,      !**/*.exe,      !**/*.dll,     !**/*.pdb, !**/*.7z,  !**/*.gz,
                                    !**/*.tar.gz,  !**/*.tar,       !**/*.gz,       !**/*.ahtm,     !**/*.ahtml,   !**/*.fhtml, !**/*.hdm,
                                    !**/*.hdml,    !**/*.hsql,      !**/*.ht,       !**/*.hta,      !**/*.htc,     !**/*.htd, !**/*.war, !**/*.ear,
                                    !**/*.htmls,   !**/*.ihtml,     !**/*.mht,      !**/*.mhtm,     !**/*.mhtml,   !**/*.ssi, !**/*.stm,
                                    !**/*.stml,    !**/*.ttml,      !**/*.txn,      !**/*.xhtm,     !**/*.xhtml,   !**/*.class, !**/*.iml,
                                    !Checkmarx/Reports/*.*''', fullScanCycle: 50, fullScansScheduled: true, groupId: '19431a46-4d94-4130-9a78-b5e2833244c6',
                                      includeOpenSourceFolders: '', incremental: true, osaArchiveIncludePatterns: '*.zip, *.war, *.ear, *.tgz',
                                      osaInstallBeforeScan    : false, password: '{AQAAABAAAAAQZhCBOvS+ym3pI038ChU4e73PzZVrLLHSeP9Ej1IH8JU=}',
                                      preset                  : '36', projectName: 'nova-regional-offers', sastEnabled: true,
                                      serverUrl               : 'https://checkmarx.loyalty.com', sourceEncoding: '1', username: ''])
                            }
                        }
                    }
                }
            }
        }

        stage("Release") {
            when { environment name: 'SKIP_SNAPSHOT_RELEASE', value: 'true' }
            steps {
                println "Tag Release"
                git(
                        url: "git@github.com:LoyaltyOne/nova-regional-offers.git",
                        branch: "master",
                        credentialsId: "jenkins-ssh-key"
                )
                authECR()
                sshagent(credentials: ['jenkins-ssh-key'], ignoreMissing: false) {
                    sh(script: './gradlew release -Prelease.useAutomaticVersion=true')
                }
            }
            post {
                success {
                    echo 'success! Lets start up the deployment job.'
                    build job: 'Deployment/nova-regional-offers', parameters: [[$class: 'StringParameterValue', name: 'BUILD_VERSION', value: "${config.version}"]], wait: false
                    script {
                        jenkinsUtils.sendSlackMessage("Success: Released Version ${config.version}", "<${env.BUILD_URL}|Click here to review the build>", good)
                    }
                }
                failure {
                    echo "failure occurred."
                    script {
                        jenkinsUtils.sendSlackMessage("Failed", "<${env.BUILD_URL}|Click here to review the build>", danger)
                    }
                }
                aborted {
                    echo "job aborted."
                    script {
                        jenkinsUtils.sendSlackMessage("Aborted", "<${env.BUILD_URL}|Click here to review the build>", warning)
                    }
                }
            }
        }

    }
}
